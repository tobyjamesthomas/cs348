#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "util.h"

EXEC SQL INCLUDE SQLCA;


// Declare variables for SQL queries
EXEC SQL BEGIN DECLARE SECTION;
    char db[6] = "cs348";

    // general
    int pubid, found;
    char title[26], type[12], year[5];

    // journal
    int volume, number;

    // article
    int appears_in, startpage, endpage;

    // author
    char name[11];
EXEC SQL END DECLARE SECTION;


int main(int argc, char * argv[]) {
    // Print error if wrong number of arguments
    if (argc != 2) {
        printf("Usage: ./bibcontent <pubid>\n");
        exit(1);
    }

    EXEC SQL WHENEVER SQLERROR GO TO error;

    EXEC SQL CONNECT TO :db;

    // Get pubid from command line
    pubid = atoi(argv[1]);

    // Check if pubid belongs to a journal or proceedings
    EXEC SQL SELECT COUNT(1) INTO :found
        FROM journal_or_proceedings
        WHERE :pubid = pubid;

    // Go to error if journal or proceedings not found
    if (found == 0) goto error;

    // Get journal or proceedings
    EXEC SQL SELECT title,
        CASE
            WHEN j.pubid IS NOT NULL THEN 'JOURNAL'
            WHEN pro.pubid IS NOT NULL THEN 'PROCEEDINGS'
        END AS type,
        CASE
            WHEN j.year IS NOT NULL THEN j.year
            WHEN pro.year IS NOT NULL THEN pro.year
        END AS year
        INTO :title, :type, :year
        FROM publication AS pub
        FULL OUTER JOIN journal AS j ON j.pubid = pub.pubid
        FULL OUTER JOIN proceedings AS pro ON pro.pubid = pub.pubid
        WHERE :pubid = pub.pubid;

    // Print journal or proceedings
    printf("Pubid: %d\n", pubid);
    printf("Type: %s\n", type);
    printf("Title: %s\n", title);

    // If journal, print journal's volume and number
    if (strcmp(type, "JOURNAL") == 0) {
        EXEC SQL SELECT volume, number INTO :volume, :number
            FROM journal
            WHERE :pubid = pubid;

        printf("Volume: %d\n", volume);
        printf("Number: %d\n", number);
    }

    printf("Year: %s\n", year);

    // Print table of contents
    printf("\n");
    printf("Table of Contents:\n");
    printf("\n");

    // Get articles that appear in journal or proceedings
    // Sort by start page
    EXEC SQL DECLARE articles CURSOR FOR
        SELECT a.pubid, title, appears_in, startpage, endpage
        FROM article AS a, publication AS p
        WHERE :pubid = appears_in
        AND p.pubid = a.pubid
        ORDER BY startpage;

    // Print articles
    EXEC SQL OPEN articles;
    EXEC SQL WHENEVER NOT FOUND GO TO end;
    for ( ;; ) {
        EXEC SQL FETCH articles INTO :pubid, :title, :appears_in, :startpage, :endpage;
        printf("Pubid: %d\n", pubid);
        printf("Type: ARTICLE\n");
        printf("Title: %s\n", title);

        // Get list of article's authors
        // Sort by name
        EXEC SQL DECLARE authors CURSOR FOR
            SELECT name
            FROM author, wrote
            WHERE :pubid = publication
            AND aid = author
            ORDER BY name;

        // Print authors
        EXEC SQL OPEN authors;
        EXEC SQL WHENEVER NOT FOUND GO TO article;
        for ( ;; ) {
            EXEC SQL FETCH authors INTO :name;
            printf("Author: %s\n", name);
        }

article:
        EXEC SQL CLOSE authors;

        // Print remaining article info
        printf("In: %d\n", appears_in);
        printf("Pages: %d--%d\n", startpage, endpage);
        printf("\n");
    }

end:
    EXEC SQL CLOSE articles;

    EXEC SQL COMMIT;
    EXEC SQL CONNECT reset;
    exit(0);

error:
    printf("Error\n");
    EXEC SQL WHENEVER SQLERROR CONTINUE;

    EXEC SQL ROLLBACK;
    EXEC SQL CONNECT reset;
    exit(1);
}
