#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "util.h"

EXEC SQL INCLUDE SQLCA;


// Declare variables for SQL queries
EXEC SQL BEGIN DECLARE SECTION;
    char db[6] = "cs348";

    // general
    int aid, found;
    int pubid;
    char title[26], type[12], year[5];

    // book
    char publisher[11];

    // journal
    int volume, number;

    // article
    char a_title[26];
    int a_pubid, appears_in, startpage, endpage;

    // author
    char name[11];
EXEC SQL END DECLARE SECTION;


int main(int argc, char * argv[]) {
    // Print error if wrong number of arguments
    if (argc != 2) {
        printf("Usage: ./bibauthor <author-id>\n");
        exit(1);
    }

    EXEC SQL WHENEVER SQLERROR GO TO error;

    EXEC SQL CONNECT TO :db;

    // Get aid from command line
    aid = atoi(argv[1]);

    // Check if author exists
    EXEC SQL SELECT COUNT(1) INTO :found
        FROM author
        WHERE :aid = aid;

    // Go to error if author not found
    if (found == 0) goto error;

    // Get list of books, journals and publications the author appears in
    // Sort by year, then title
    EXEC SQL DECLARE publications CURSOR FOR
        SELECT pub.pubid, title,
        CASE
            WHEN book.year IS NOT NULL THEN 'BOOK'
            WHEN journal.year IS NOT NULL THEN 'JOURNAL'
            WHEN proceedings.year IS NOT NULL THEN 'PROCEEDINGS'
        END AS type,
        CASE
            WHEN book.year IS NOT NULL THEN book.year
            WHEN journal.year IS NOT NULL THEN journal.year
            WHEN proceedings.year IS NOT NULL THEN proceedings.year
        END AS year
        FROM publication AS pub
        FULL OUTER JOIN book ON book.pubid = pub.pubid
        FULL OUTER JOIN journal ON journal.pubid = pub.pubid
        FULL OUTER JOIN proceedings ON proceedings.pubid = pub.pubid
        WHERE book.pubid IN (
            SELECT publication
            FROM wrote
            WHERE :aid = author
        ) OR journal.pubid IN (
            SELECT appears_in
            FROM wrote, article
            WHERE :aid = author
            AND publication = article.pubid
        ) OR proceedings.pubid IN (
            SELECT appears_in
            FROM wrote, article
            WHERE :aid = author
            AND publication = article.pubid
        )
        ORDER BY year DESC, title;

    // Print publications
    EXEC SQL OPEN publications;
    EXEC SQL WHENEVER NOT FOUND GO TO end;
    for ( ;; ) {
        EXEC SQL FETCH publications INTO :pubid, :title, :type, :year;

        if ( strcmp(type, "BOOK") == 0 ) { // Book

            // Print book info
            printf("Pubid: %d\n", pubid);
            printf("Type: %s\n", type);
            printf("Title: %s\n", title);

            // Get list of book's authors
            // Sort by name
            EXEC SQL DECLARE b_authors CURSOR FOR
                SELECT name
                FROM author, wrote
                WHERE :pubid = publication
                AND aid = author
                ORDER BY name;

            // Print authors
            EXEC SQL OPEN b_authors;
            EXEC SQL WHENEVER NOT FOUND GO TO book;
            for ( ;; ) {
                EXEC SQL FETCH b_authors INTO :name;
                printf("Author: %s\n", name);
            }

book:
            EXEC SQL CLOSE b_authors;

            // Get book's publisher
            EXEC SQL SELECT publisher INTO :publisher
                FROM book
                WHERE :pubid = pubid;

            printf("Publisher: %s\n", publisher);
            printf("Year: %s\n", year);
        } else if ( strcmp(type, "JOURNAL") == 0 || strcmp(type, "PROCEEDINGS") == 0 ) { // Journal or Proceedings

            // Get the author's articles the appear in the journal or proceedings
            // Sort by title
            EXEC SQL DECLARE articles CURSOR FOR
                SELECT publication, title, appears_in, startpage, endpage
                FROM wrote, publication AS p, article AS a
                WHERE :aid = author
                AND publication = p.pubid AND publication = a.pubid
                AND :pubid = appears_in
                ORDER BY title;

            // Print the articles before the journal or proceedings
            EXEC SQL OPEN articles;
            EXEC SQL WHENEVER NOT FOUND GO TO j_or_p;
            for ( ;; ) {
                EXEC SQL FETCH articles INTO :a_pubid, :a_title, :appears_in, :startpage, :endpage;
                printf("Pubid: %d\n", a_pubid);
                printf("Type: ARTICLE\n");
                printf("Title: %s\n", a_title);

                // Get list of article's authors
                // Sort by name
                EXEC SQL DECLARE a_authors CURSOR FOR
                    SELECT name
                    FROM author, wrote
                    WHERE :a_pubid = publication
                    AND aid = author
                    ORDER BY name;

                // Print authors
                EXEC SQL OPEN a_authors;
                EXEC SQL WHENEVER NOT FOUND GO TO article;
                for ( ;; ) {
                    EXEC SQL FETCH a_authors INTO :name;
                    printf("Author: %s\n", name);
                }

article:
                EXEC SQL CLOSE a_authors;
                printf("In: %d\n", appears_in);
                printf("Pages: %d--%d\n", startpage, endpage);
                printf("\n"); // Blank line
            }

j_or_p:
            EXEC SQL CLOSE articles;

            // Print the journal or proceeding
            printf("Pubid: %d\n", pubid);
            printf("Type: %s\n", type);
            printf("Title: %s\n", title);

            // If journal, then print journal's volume and number
            if ( strcmp(type, "JOURNAL") == 0 ) {
                EXEC SQL SELECT volume, number INTO :volume, :number
                    FROM journal
                    WHERE :pubid = pubid;

                printf("Volume: %d\n", volume);
                printf("Number: %d\n", number);
            }

            printf("Year: %s\n", year);
        }

        printf("\n"); // Blank line
    }

end:
    EXEC SQL CLOSE publications;

    EXEC SQL COMMIT;
    EXEC SQL CONNECT reset;
    exit(0);

error:
    printf("Error\n");
    EXEC SQL WHENEVER SQLERROR CONTINUE;

    EXEC SQL ROLLBACK;
    EXEC SQL CONNECT reset;
    exit(1);
}
